<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Riccardo Pinosio: personal website</title>
<link>https://wwww.riccardopinosio.com/</link>
<atom:link href="https://wwww.riccardopinosio.com/index.xml" rel="self" type="application/rss+xml"/>
<description>AI to the stars</description>
<image>
<url>https://wwww.riccardopinosio.com/quarto.png</url>
<title>Riccardo Pinosio: personal website</title>
<link>https://wwww.riccardopinosio.com/</link>
</image>
<generator>quarto-1.5.55</generator>
<lastBuildDate>Sun, 28 Jul 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>Hugot: easy onnx pipelines in Golang</title>
  <dc:creator>Riccardo Pinosio</dc:creator>
  <link>https://wwww.riccardopinosio.com/blog/posts/hugo_podcast.html</link>
  <description><![CDATA[ 




<p>I have recently had the priviledge to be able to speak about <a href="https://github.com/knights-analytics/hugot">hugot</a> on the “Cup o’ Go” podcast, together with <a href="https://www.linkedin.com/in/jhallio/">Jonathan Hall</a> and <a href="https://www.linkedin.com/in/shay-nehmad-18183ab4/">Shay Nehmad</a>. You can find the full episode <a href="https://cupogo.dev/episodes/go-meet-hugging-face-interview-with-riccardo-pinosio">here</a> and on youtube:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/vt7KwCETPQ4?si=0vj9DuAOi7ucOOtv" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>



 ]]></description>
  <category>golang</category>
  <category>transformers</category>
  <guid>https://wwww.riccardopinosio.com/blog/posts/hugo_podcast.html</guid>
  <pubDate>Sun, 28 Jul 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Scientific note-taking with org-roam, citar, and zotero</title>
  <dc:creator>Riccardo Pinosio</dc:creator>
  <link>https://wwww.riccardopinosio.com/blog/posts/zotero_notes_article.html</link>
  <description><![CDATA[ 




<section id="the-problem" class="level1">
<h1>The problem</h1>
<p>We have all been there: searching for that elusive system that acts as our <a href="https://en.wikipedia.org/wiki/Extended_mind_thesis">extended mind</a>, bringing order to our scattered notes and allowing us to retrieve the right piece of information at the right time, without friction, and perhaps even - one can only dream! - enabling us to generate new ideas from a shapeless mass of sketches.</p>
<p>As a microscopic step in pursuit of this lofty goal, this blogpost will deal with my current strategy to manage scientific note taking using org-roam, citar, and zotero. The most interesting part of this system is perhaps the one-way import of zotero’s pdf editor notes into an org-roam reference note that is linked to the corresponding Zotero item.</p>
</section>
<section id="org-roam" class="level1">
<h1>Org roam</h1>
<p>The backbone of the system is org-roam. The configuration of the package is nothing out of the ordinary: I have a knowledge base directory that rules them all, called <strong>braindump</strong>, with subfolders <strong>meetings</strong>, <strong>main</strong> (which contains the bulk of the notes), <strong>articles</strong> (for trifles such as the present blogpost), and, most importantly, <strong>references</strong>.</p>
<p>The org-roam configuration is also rather standard:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode commonlisp code-with-copy"><code class="sourceCode commonlisp"><span id="cb1-1">(after! org-roam</span>
<span id="cb1-2">  :ensure <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span></span>
<span id="cb1-3">  :custom</span>
<span id="cb1-4">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">setq</span> org-roam-directory (file-truename <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/braindump"</span>))</span>
<span id="cb1-5">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">setq</span> org-roam-dailies-directory <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"daily/"</span>)</span>
<span id="cb1-6">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">setq</span> org-roam-dailies-capture-templates</span>
<span id="cb1-7">        '((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span> entry</span>
<span id="cb1-8">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"* %?"</span></span>
<span id="cb1-9">           :target (file+head <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&lt;%Y-%m-%d&gt;.org"</span></span>
<span id="cb1-10">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#+title: %&lt;%Y-%m-%d&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))))</span>
<span id="cb1-11">  (add-to-list <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'display-buffer-alist</span></span>
<span id="cb1-12">               '(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*org-roam</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*"</span></span>
<span id="cb1-13">                 (display-buffer-in-direction)</span>
<span id="cb1-14">                 (direction . right)</span>
<span id="cb1-15">                 (window-width . <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33</span>)</span>
<span id="cb1-16">                 (window-height . fit-window-to-buffer)))</span>
<span id="cb1-17">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">setq</span> org-roam-capture-templates</span>
<span id="cb1-18">        '((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span> plain <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%?"</span></span>
<span id="cb1-19">           :target (file+head <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org"</span></span>
<span id="cb1-20">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#+title: ${title}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;t"</span>)</span>
<span id="cb1-21">           :unnarrowed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span>)</span>
<span id="cb1-22">          (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meeting"</span> plain <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%?"</span></span>
<span id="cb1-23">           :target (file+head <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"meetings/%&lt;%Y%m%d%H%M%S&gt;-${slug}.org"</span></span>
<span id="cb1-24">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":PROPERTIES:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:project: fill</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:people: fill</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:END:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#+title: ${title} %&lt;%Y-%m-%d&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#+filetags:"</span>)</span>
<span id="cb1-25">           :unnarrowed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span>)</span>
<span id="cb1-26">          (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main"</span> plain <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%?"</span></span>
<span id="cb1-27">           :target (file+head <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main/%&lt;%Y%m%d%H%M%S&gt;-${slug}.org"</span></span>
<span id="cb1-28">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#+title: ${title}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#+filetags:"</span>)</span>
<span id="cb1-29">           :unnarrowed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span>)</span>
<span id="cb1-30">          (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"article"</span> plain <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%?"</span></span>
<span id="cb1-31">           :target (file+head <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"articles/${title}-${slug}.org"</span></span>
<span id="cb1-32">                              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#+title: ${title}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#+filetags: articles</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#+AUTHOR: Riccardo Pinosio</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#+DATE: %&lt;%Y-%m-%d&gt;"</span>)</span>
<span id="cb1-33">           :unnarrowed <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">t</span>)))</span>
<span id="cb1-34">  :config</span>
<span id="cb1-35">  (org-roam-db-autosync-enable))</span></code></pre></div>
<p>It should be noted at this point that I am using doom emacs, hence the <strong>after</strong> directive etc. in the configuration.</p>
<p>I also use <strong>org-roam-dailies</strong> to take daily notes, and <strong>org-ql</strong> together with <strong>org-agenda</strong> to scour my org-roam files for TODOs, disseminated here and there, and collate them into a nice overview.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://wwww.riccardopinosio.com/blog/assets/todo-overview.png" class="img-fluid figure-img"></p>
<figcaption>I need to remember to pay my taxes!</figcaption>
</figure>
</div>
</section>
<section id="org-mode" class="level1">
<h1>Org mode</h1>
<p>The only important bit of code here is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode commonlisp code-with-copy"><code class="sourceCode commonlisp"><span id="cb2-1">(after! org</span>
<span id="cb2-2">  :custom</span>
<span id="cb2-3">  (org-link-set-parameters <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zotero"</span> :follow</span>
<span id="cb2-4">                           (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> (zpath)</span>
<span id="cb2-5">                             (browse-url</span>
<span id="cb2-6">                              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">format</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zotero:%s"</span> zpath)))))</span></code></pre></div>
<p>This configuration bit ensures that :zotero: links are redirected by org-mode to the default browser for handling.</p>
</section>
<section id="citar" class="level1">
<h1>Citar</h1>
<p>On the emacs side, scientific references are managed via citar (installed via doom). There’s a couple of important tweaks to the configuration to make it work nicely with org-cite:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode commonlisp code-with-copy"><code class="sourceCode commonlisp"><span id="cb3-1">(after! oc</span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">setq</span> org-cite-global-bibliography '(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/braindump/references.bib"</span>)))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; Use `citar' with `org-cite'</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;;</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">(use-package! citar</span>
<span id="cb3-8">  :after oc</span>
<span id="cb3-9">  :custom</span>
<span id="cb3-10">  (org-cite-insert-processor <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'citar</span>)</span>
<span id="cb3-11">  (org-cite-follow-processor <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'citar</span>)</span>
<span id="cb3-12">  (org-cite-activate-processor <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'citar</span>)</span>
<span id="cb3-13">  (citar-bibliography '(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/braindump/references.bib"</span>))</span>
<span id="cb3-14">  (citar-org-roam-note-title-template <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${author} - ${title}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">pdf: ${file}"</span>)</span>
<span id="cb3-15">  :bind</span>
<span id="cb3-16">  (:map org-mode-map :package org (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C-c b"</span> . <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span>org-cite-insert)))</span>
<span id="cb3-17"></span>
<span id="cb3-18">(defadvice! riccardo/citar-file-trust-zotero (oldfun &amp;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> r)</span>
<span id="cb3-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Leave Zotero-generated file paths alone, especially zotero://..."</span></span>
<span id="cb3-20">  :around '(citar-file-open citar-file--find-files-in-dirs)</span>
<span id="cb3-21">  (cl-letf (((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">symbol-function</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'file-exists-p</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span>always)</span>
<span id="cb3-22">            ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">symbol-function</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'expand-file-name</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> &amp;<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> _) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span>)))</span>
<span id="cb3-23">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> oldfun r)))</span>
<span id="cb3-24"></span>
<span id="cb3-25">(after! citar</span>
<span id="cb3-26">  (add-to-list <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'citar-file-open-functions</span> '(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pdf"</span> . citar-file-open-external)))</span></code></pre></div>
<p>The main points to highlight here are:</p>
<ul>
<li>citar-org-roam-note-title-template specifies the org-capture template used by org-roam reference notes, which are first created with the citar-open-notes function. Note the <code>${file}</code> in the template: this will pick up the link to the zotero pdf and insert in in the org-roam note</li>
<li>the citar-file-trust-zotero thingy is needed to have citar ignore links in references that start with “zotero:”. Otherwise, citar will scramble them.</li>
<li>we also modify citar-file-open-functions to make sure that .pdf files are dispatched to an external application.</li>
</ul>
</section>
<section id="opening-zotero-pdf-from-org-roam" class="level1">
<h1>Opening Zotero pdf from org roam</h1>
<p>With the above setup, we can then customize the Zotero latex bibliography export by making sure that the “file” field contains a “zotero:” link to the zotero pdf (which will be opened in Zotero’s pdf annotator). Then the citar-org-roam-note-title-template thing above will add this path at the head of the reference note.</p>
<p>Customizing Zotero’s export is a bit fiddly. The steps are:</p>
<ol type="1">
<li>Install the better bibtex Zotero plugin</li>
<li>Customize the better bibtex export with a bit of javascript code that formats the link to the article pdf</li>
<li>Export the references to the file monitored by citar (see above) and keep them exported with zotero’s keep updated option</li>
</ol>
<p>Step 2 is kind of painful because the customization code (<a href="https:retorque.re/zotero-better-bibtex/exporting/scripting/">see here</a>) needs to be inserted into the “postscript” field, under <code>preferences &gt; better bibtex &gt; export</code>. This field is basically a box where you can put some javascript that is evaluated at export time for each entry. Then, one can do:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (Translator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">BetterTeX</span>) {</span>
<span id="cb4-2">    final_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Object</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">values</span>(tex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">has</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb4-3">        Zotero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">debug</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">JSON</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stringify</span>(value))</span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (value[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contentType"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"application/pdf"</span>){</span>
<span id="cb4-5">            itemKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">undefined</span></span>
<span id="cb4-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hasOwnProperty</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itemKey"</span>)) {</span>
<span id="cb4-7">                itemKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"itemKey"</span>]</span>
<span id="cb4-8">            } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hasOwnProperty</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key"</span>)) {</span>
<span id="cb4-9">                itemKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key"</span>]</span>
<span id="cb4-10">                }</span>
<span id="cb4-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (itemKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">undefined</span>) {</span>
<span id="cb4-12">                Zotero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">debug</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"COULD NOT DETECT THE ITEM KEY"</span>)</span>
<span id="cb4-13">            }</span>
<span id="cb4-14">            path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`zotero://open-pdf/library/items/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>itemKey<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">${</span>value[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localPath"</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(itemKey)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substring</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb4-15">        } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb4-16">            path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localPath"</span>]</span>
<span id="cb4-17">        }</span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">([\\;])</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/g</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$1"</span>)</span>
<span id="cb4-19">    })</span>
<span id="cb4-20">    final_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">join</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb4-21">    Zotero<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">debug</span>(final_paths)</span>
<span id="cb4-22">    tex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add</span>({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> final_paths})</span>
<span id="cb4-23">}</span></code></pre></div>
<p>This bit of code takes the reference at export time, and it creates a zotero link to the pdf, which is stored in the <code>file</code> field of the export. Note the calls to <code>Zotero.debug</code>. This is the only way to debug the function: the output can be seen by enabling debugging in <code>help &gt; debug output logging</code>.</p>
<p>Once we have this, however, we are rewarded with the ability of creating reference notes in org-roam which have, right under the title, a link to the article’s pdf. See below an example using my PhD thesis.</p>
<p><img src="https://wwww.riccardopinosio.com/blog/assets/reference_note-header.png" class="img-fluid"></p>
<p>This link can be opened in org mode, which will then let the browser handle the link, which will then open the pdf in Zotero’s pdf annotator. We have then linked the org-roam zotero note with the corresponding pdf in Zotero via Zotero’s note export.</p>
</section>
<section id="zotero-note-export" class="level1">
<h1>Zotero note export</h1>
<p>It would be quite dandy if we could also find a way to import the notes saved in Zotero’s pdf annotator to the corresponding reference note in org-roam.</p>
<p>Fortunately, the notes are exported in the references.tex file in latex format inside a <code>note</code> field, and they also contain the page number of the annotation. This field can then be parsed and converted from latex to org format, also adding a link to the pdf page in the note. The basic idea is the following: every time an org file is opened or saved, we run a <code>update-zotero-notes</code> function that checks whether this buffer is a reference note. If it is, then it looks into the <code>references.tex</code> file exported from Zotero for a <code>note</code> field for the reference and parses it. The results are then appended at the end of the buffer of the roam-note, under a <code>zotero notes</code> heading.</p>
<p>The code that does this is a bit lengthy to paste here: you can find it in my config <a href="https://github.com/riccardopinosio/dotfiles/blob/master/dot_doom.d/org-roam-zotero-notes.el">here</a>.</p>
<p>The important bit is to add the update-zotero-notes function to the <code>find-file-hook</code> and <code>after-save-hook</code> hooks so that they are ran on file open and save:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode commonlisp code-with-copy"><code class="sourceCode commonlisp"><span id="cb5-1">(add-hook <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'find-file-hook</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span>riccardo/update-zotero-notes)</span>
<span id="cb5-2">(add-hook <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">'after-save-hook</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span>riccardo/update-zotero-notes)</span></code></pre></div>
<p>And here is how it looks when setup:</p>
<p><img src="https://wwww.riccardopinosio.com/blog/assets/2023-03-27 20.40.21.gif" class="img-fluid"></p>
<p>Now we have our notes in the Zotero pdf annotator automagically imported into the corresponding org-roam reference.</p>
<p>Of course, with this method it’s only possible to import notes from Zotero into org-roam. It is not possible to e.g.&nbsp;link from a Zotero note to an org-roam note. It would be interesting to investigate whether a tighter integration between Zotero and org-roam is possible, but this would seem to require writing a Zotero extension.</p>


</section>

 ]]></description>
  <category>emacs</category>
  <category>zotero</category>
  <guid>https://wwww.riccardopinosio.com/blog/posts/zotero_notes_article.html</guid>
  <pubDate>Thu, 20 Apr 2023 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>

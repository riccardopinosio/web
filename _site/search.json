[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Riccardo Pinosio: personal website",
    "section": "",
    "text": "Welcome! I’m Riccardo Pinosio. I’m director of R&D at Knights Analytics. Before that I was a technologist at Avanade and data scientist at Funda. I’m also on the scientific advisory board of digi.bio.\nI hold a PhD in logic from the ILLC and lecture in machine learning at the Amsterdam University of Applied Sciences and CMI.\nI prefer to work at the intersection of R&D, business, and engineering because that’s where product innovation happens. My current focus is on NLP (information extraction, entity resolution), large-scale knowledge graphs & representation learning, and (neuro)-symbolic AI, with applications primarily to AI assisted data engineering and AI analytics automation in banking, finance, healthcare, and life sciences.\nOther than that I love open source, emacs, and weird programming languages that provide new perspectives on computation."
  },
  {
    "objectID": "index.html#contacts",
    "href": "index.html#contacts",
    "title": "Riccardo Pinosio: personal website",
    "section": " Contacts",
    "text": "Contacts\nThe best way to get in contact with me is to email me at riccardo@knightsanalytics.com, or to shoot me a DM on linkedin."
  },
  {
    "objectID": "index.html#blog",
    "href": "index.html#blog",
    "title": "Riccardo Pinosio: personal website",
    "section": " Blog",
    "text": "Blog\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nCategories\n\n\n\n\n\n\nApril 21, 2023\n\n\nScientific note-taking with org-roam, citar, and zotero\n\n\nemacs,zotero\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#colophon",
    "href": "index.html#colophon",
    "title": "Riccardo Pinosio: personal website",
    "section": " Colophon",
    "text": "Colophon\nThis website is generated with emacs  and org-mode, adapting a theme from Hamel Husain."
  },
  {
    "objectID": "blog/posts/zotero_notes_article.html",
    "href": "blog/posts/zotero_notes_article.html",
    "title": "Scientific note-taking with org-roam, citar, and zotero",
    "section": "",
    "text": "The problem\nWe have all been there: searching for that elusive system that acts as our extended mind, bringing order to our scattered notes and allowing us to retrieve the right piece of information at the right time, without friction, and perhaps even - one can only dream! - enabling us to generate new ideas from a shapeless mass of sketches.\nAs a microscopic step in pursuit of this lofty goal, this blogpost will deal with my current strategy to manage scientific note taking using org-roam, citar, and zotero. The most interesting part of this system is perhaps the one-way import of zotero’s pdf editor notes into an org-roam reference note that is linked to the corresponding Zotero item.\n\n\nOrg roam\nThe backbone of the system is org-roam. The configuration of the package is nothing out of the ordinary: I have a knowledge base directory that rules them all, called braindump, with subfolders meetings, main (which contains the bulk of the notes), articles (for trifles such as the present blogpost), and, most importantly, references.\nThe org-roam configuration is also rather standard:\n(after! org-roam\n  :ensure t\n  :custom\n  (setq org-roam-directory (file-truename \"~/braindump\"))\n  (setq org-roam-dailies-directory \"daily/\")\n  (setq org-roam-dailies-capture-templates\n        '((\"d\" \"default\" entry\n           \"* %?\"\n           :target (file+head \"%&lt;%Y-%m-%d&gt;.org\"\n                              \"#+title: %&lt;%Y-%m-%d&gt;\\n\"))))\n  (add-to-list 'display-buffer-alist\n               '(\"\\\\*org-roam\\\\*\"\n                 (display-buffer-in-direction)\n                 (direction . right)\n                 (window-width . 0.33)\n                 (window-height . fit-window-to-buffer)))\n  (setq org-roam-capture-templates\n        '((\"d\" \"default\" plain \"%?\"\n           :target (file+head \"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org\"\n                              \"#+title: ${title}\\n&lt;t\")\n           :unnarrowed t)\n          (\"m\" \"meeting\" plain \"%?\"\n           :target (file+head \"meetings/%&lt;%Y%m%d%H%M%S&gt;-${slug}.org\"\n                              \":PROPERTIES:\\n:project: fill\\n:people: fill\\n:END:\\n#+title: ${title} %&lt;%Y-%m-%d&gt;\\n#+filetags:\")\n           :unnarrowed t)\n          (\"t\" \"main\" plain \"%?\"\n           :target (file+head \"main/%&lt;%Y%m%d%H%M%S&gt;-${slug}.org\"\n                              \"#+title: ${title}\\n#+filetags:\")\n           :unnarrowed t)\n          (\"a\" \"article\" plain \"%?\"\n           :target (file+head \"articles/${title}-${slug}.org\"\n                              \"#+title: ${title}\\n#+filetags: articles\\n#+AUTHOR: Riccardo Pinosio\\n#+DATE: %&lt;%Y-%m-%d&gt;\")\n           :unnarrowed t)))\n  :config\n  (org-roam-db-autosync-enable))\nIt should be noted at this point that I am using doom emacs, hence the after directive etc. in the configuration.\nI also use org-roam-dailies to take daily notes, and org-ql together with org-agenda to scour my org-roam files for TODOs, disseminated here and there, and collate them into a nice overview.\n\n\n\nI need to remember to pay my taxes!\n\n\n\n\nOrg mode\nThe only important bit of code here is:\n(after! org\n  :custom\n  (org-link-set-parameters \"zotero\" :follow\n                           (lambda (zpath)\n                             (browse-url\n                              (format \"zotero:%s\" zpath)))))\nThis configuration bit ensures that :zotero: links are redirected by org-mode to the default browser for handling.\n\n\nCitar\nOn the emacs side, scientific references are managed via citar (installed via doom). There’s a couple of important tweaks to the configuration to make it work nicely with org-cite:\n(after! oc\n  (setq org-cite-global-bibliography '(\"~/braindump/references.bib\")))\n\n;; Use `citar' with `org-cite'\n;;\n\n(use-package! citar\n  :after oc\n  :custom\n  (org-cite-insert-processor 'citar)\n  (org-cite-follow-processor 'citar)\n  (org-cite-activate-processor 'citar)\n  (citar-bibliography '(\"~/braindump/references.bib\"))\n  (citar-org-roam-note-title-template \"${author} - ${title}\\npdf: ${file}\")\n  :bind\n  (:map org-mode-map :package org (\"C-c b\" . #'org-cite-insert)))\n\n(defadvice! riccardo/citar-file-trust-zotero (oldfun &rest r)\n  \"Leave Zotero-generated file paths alone, especially zotero://...\"\n  :around '(citar-file-open citar-file--find-files-in-dirs)\n  (cl-letf (((symbol-function 'file-exists-p) #'always)\n            ((symbol-function 'expand-file-name) (lambda (first &rest _) first)))\n    (apply oldfun r)))\n\n(after! citar\n  (add-to-list 'citar-file-open-functions '(\"pdf\" . citar-file-open-external)))\nThe main points to highlight here are:\n\ncitar-org-roam-note-title-template specifies the org-capture template used by org-roam reference notes, which are first created with the citar-open-notes function. Note the ${file} in the template: this will pick up the link to the zotero pdf and insert in in the org-roam note\nthe citar-file-trust-zotero thingy is needed to have citar ignore links in references that start with “zotero:”. Otherwise, citar will scramble them.\nwe also modify citar-file-open-functions to make sure that .pdf files are dispatched to an external application.\n\n\n\nOpening Zotero pdf from org roam\nWith the above setup, we can then customize the Zotero latex bibliography export by making sure that the “file” field contains a “zotero:” link to the zotero pdf (which will be opened in Zotero’s pdf annotator). Then the citar-org-roam-note-title-template thing above will add this path at the head of the reference note.\nCustomizing Zotero’s export is a bit fiddly. The steps are:\n\nInstall the better bibtex Zotero plugin\nCustomize the better bibtex export with a bit of javascript code that formats the link to the article pdf\nExport the references to the file monitored by citar (see above) and keep them exported with zotero’s keep updated option\n\nStep 2 is kind of painful because the customization code (see here) needs to be inserted into the “postscript” field, under preferences &gt; better bibtex &gt; export. This field is basically a box where you can put some javascript that is evaluated at export time for each entry. Then, one can do:\nif (Translator.BetterTeX) {\n    final_paths = Object.values(tex.has[\"file\"][\"value\"]).map(value =&gt; {\n        Zotero.debug(JSON.stringify(value))\n        if (value[\"contentType\"] == \"application/pdf\"){\n            itemKey = undefined\n            if (value.hasOwnProperty(\"itemKey\")) {\n                itemKey = value[\"itemKey\"]\n            } else if (value.hasOwnProperty(\"key\")) {\n                itemKey = value[\"key\"]\n                }\n            if (itemKey == undefined) {\n                Zotero.debug(\"COULD NOT DETECT THE ITEM KEY\")\n            }\n            path = `zotero://open-pdf/library/items/${itemKey}?${value[\"localPath\"].split(itemKey)[1].substring(1)}`\n        } else {\n            path = value[\"localPath\"]\n        }\n        return path.replace(/([\\\\;])/g, \"\\\\$1\")\n    })\n    final_paths = final_paths.join(\";\")\n    Zotero.debug(final_paths)\n    tex.add({\"name\":\"file\", \"value\": final_paths})\n}\nThis bit of code takes the reference at export time, and it creates a zotero link to the pdf, which is stored in the file field of the export. Note the calls to Zotero.debug. This is the only way to debug the function: the output can be seen by enabling debugging in help &gt; debug output logging.\nOnce we have this, however, we are rewarded with the ability of creating reference notes in org-roam which have, right under the title, a link to the article’s pdf. See below an example using my PhD thesis.\n\nThis link can be opened in org mode, which will then let the browser handle the link, which will then open the pdf in Zotero’s pdf annotator. We have then linked the org-roam zotero note with the corresponding pdf in Zotero via Zotero’s note export.\n\n\nZotero note export\nIt would be quite dandy if we could also find a way to import the notes saved in Zotero’s pdf annotator to the corresponding reference note in org-roam.\nFortunately, the notes are exported in the references.tex file in latex format inside a note field, and they also contain the page number of the annotation. This field can then be parsed and converted from latex to org format, also adding a link to the pdf page in the note. The basic idea is the following: every time an org file is opened or saved, we run a update-zotero-notes function that checks whether this buffer is a reference note. If it is, then it looks into the references.tex file exported from Zotero for a note field for the reference and parses it. The results are then appended at the end of the buffer of the roam-note, under a zotero notes heading.\nThe code that does this is a bit lengthy to paste here: you can find it in my config here.\nThe important bit is to add the update-zotero-notes function to the find-file-hook and after-save-hook hooks so that they are ran on file open and save:\n(add-hook 'find-file-hook #'riccardo/update-zotero-notes)\n(add-hook 'after-save-hook #'riccardo/update-zotero-notes)\nAnd here is how it looks when setup:\n\nNow we have our notes in the Zotero pdf annotator automagically imported into the corresponding org-roam reference.\nOf course, with this method it’s only possible to import notes from Zotero into org-roam. It is not possible to e.g. link from a Zotero note to an org-roam note. It would be interesting to investigate whether a tighter integration between Zotero and org-roam is possible, but this would seem to require writing a Zotero extension."
  }
]